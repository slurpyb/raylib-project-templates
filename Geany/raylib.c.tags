# format=pipe 
RaylibIsAwesome|SuperStefkaGeanyTags|OpenSourceHaveFun|
InitWindow|void|(int width, int height, const char *title);|
CloseWindow|void|(void);|
IsWindowReady|bool|(void);|
WindowShouldClose|bool|(void);|
IsWindowMinimized|bool(void);|
ToggleFullscreen|void|(void);|
SetWindowIcon|void|(Image image);|
SetWindowTitle|void|(const char *title);|
SetWindowPosition|void|(int x, int y);|
SetWindowMonitor|void|(int monitor);|
SetWindowMinSize|void|(int width, int height);|
SetWindowSize|void|(int width, int height);|
GetScreenWidth|int|(void);|
GetScreenHeight|int|(void);|
ShowCursor|void|(void);|
HideCursor|void|(void);|
IsCursorHidden|bool|(void);|
EnableCursor|void|(void);
DisableCursor|void|(void);|
ClearBackground|void|(Color color);|
BeginDrawing|void|(void);|
EndDrawing|void|(void);|
BeginMode2D|void|(Camera2D camera);|
EndMode2D|void|(void);
BeginMode3D|void|(Camera3D camera);|
EndMode3D|void|(void);|
BeginTextureMode|void|(RenderTexture2D target);|
EndTextureMode|void|(void);|
GetMouseRay|Ray|(Vector2 mousePosition, Camera camera);|
GetWorldToScreen|Vector2|(Vector3 position, Camera camera);|
GetCameraMatrix|Matrix|(Camera camera);|
SetTargetFPS|void|(int fps);|
GetFPS|int|(void);|
GetFrameTime|float|(void);|
GetTime|double|(void);|
ColorToInt|int|(Color color);|
ColorNormalize|Vector4|(Color color);|
ColorToHSV|Vector3|(Color color);|
GetColor|Color|(int hexValue);|
Fade|Color|(Color color, float alpha);|
ShowLogo|void|(void);|
SetConfigFlags|void|(unsigned char flags);|
SetTraceLog|void|(unsigned char types);|
TraceLog|void|(int logType, const char *text, ...);|
TakeScreenshot|void|(const char *fileName);|
GetRandomValue|int|(int min, int max);|
IsFileExtension|bool|(const char *fileName, const char *ext);|
GetExtension|const char *|(const char *fileName);|
GetFileName|const char *|(const char *filePath);|
GetDirectoryPath|const char *|(const char *fileName);|
GetWorkingDirectory|const char *|(void);|
ChangeDirectory|bool|(const char *dir);|
IsFileDropped|bool|(void);|
GetDroppedFiles|char **|(int *count);|
ClearDroppedFiles|void|(void);|
StorageSaveValue|void|(int position, int value);|
StorageLoadValue|int|(int position);|
IsKeyPressed|bool|(int key);|
IsKeyDown|bool|(int key);|
IsKeyReleased|bool|(int key);|
IsKeyUp|bool|(int key);|
GetKeyPressed|int|(void);|
SetExitKey|void|(int key);|
IsGamepadAvailable|bool|(int gamepad);|
IsGamepadName|bool|(int gamepad, const char *name);|
GetGamepadName|const char *|(int gamepad);|
IsGamepadButtonPressed|bool|(int gamepad, int button);|
IsGamepadButtonDown|bool|(int gamepad, int button);|
IsGamepadButtonReleased|bool|(int gamepad, int button);|
IsGamepadButtonUp|bool|(int gamepad, int button);|
GetGamepadButtonPressed|int|(void);|
GetGamepadAxisCount|int|(int gamepad);|
GetGamepadAxisMovement|float|(int gamepad, int axis);|
IsMouseButtonPressed|bool|(int button);|
IsMouseButtonDown|bool|(int button);|
IsMouseButtonReleased|bool|(int button);|
IsMouseButtonUp|bool|(int button);|
GetMouseX|int|(void);|
GetMouseY|int|(void);|
GetMousePosition|Vector2|(void);|
SetMousePosition|void|(Vector2 position);|
GetMouseWheelMove|int|(void);|
GetTouchX|int|(void);|
GetTouchY|int|(void);|
GetTouchPosition|Vector2|(int index);|
SetGesturesEnabled|void|(unsigned int gestureFlags);|
IsGestureDetected|bool|(int gesture);|
GetGestureDetected|int|(void);|
GetTouchPointsCount|int|(void);|
GetGestureHoldDuration|float|(void);|
GetGestureDragVector|Vector2|(void);|
GetGestureDragAngle|float|(void);|
GetGesturePinchVector|Vector2|(void);|
GetGesturePinchAngle|float|(void);|
SetCameraMode|void|(Camera camera, int mode);|
UpdateCamera|void|(Camera *camera);|
SetCameraPanControl|void|(int panKey);|
SetCameraAltControl|void|(int altKey);|
SetCameraSmoothZoomControl|void|(int szKey);|
SetCameraMoveControls|void|(int frontKey, int backKey, int rightKey, int leftKey, int upKey, int downKey);|
DrawPixel|void|(int posX, int posY, Color color);|
DrawPixelV|void|(Vector2 position, Color color);
DrawLine|void|(int startPosX, int startPosY, int endPosX, int endPosY, Color color);
DrawLineV|void|(Vector2 startPos, Vector2 endPos, Color color);|
DrawLineEx|void|(Vector2 startPos, Vector2 endPos, float thick, Color color);|
DrawLineBezier|void|(Vector2 startPos, Vector2 endPos, float thick, Color color);|
DrawCircle|void|(int centerX, int centerY, float radius, Color color);|
DrawCircleGradient|void|(int centerX, int centerY, float radius, Color color1, Color color2);|
DrawCircleV|void|(Vector2 center, float radius, Color color);|
DrawCircleLines|void|(int centerX, int centerY, float radius, Color color);|
DrawRectangle|void|(int posX, int posY, int width, int height, Color color);|
DrawRectangleV|void|(Vector2 position, Vector2 size, Color color);|
DrawRectangleRec|void|(Rectangle rec, Color color);|
DrawRectanglePro|void|(Rectangle rec, Vector2 origin, float rotation, Color color);|
DrawRectangleGradientV|void|(int posX, int posY, int width, int height, Color color1, Color color2);|
DrawRectangleGradientH|void|(int posX, int posY, int width, int height, Color color1, Color color2);|
DrawRectangleGradientEx|void|(Rectangle rec, Color col1, Color col2, Color col3, Color col4);|
DrawRectangleLines|void|(int posX, int posY, int width, int height, Color color);|
DrawRectangleLinesEx|void|(Rectangle rec, int lineThick, Color color);|
DrawTriangle|void|(Vector2 v1, Vector2 v2, Vector2 v3, Color color);|
DrawTriangleLines|void|(Vector2 v1, Vector2 v2, Vector2 v3, Color color);|
DrawPoly|void|(Vector2 center, int sides, float radius, float rotation, Color color);|
DrawPolyEx|void|(Vector2 *points, int numPoints, Color color);|
DrawPolyExLines|void|(Vector2 *points, int numPoints, Color color);|
CheckCollisionRecs|bool|(Rectangle rec1, Rectangle rec2);|
CheckCollisionCircles|bool|(Vector2 center1, float radius1, Vector2 center2, float radius2);|
CheckCollisionCircleRec|bool|(Vector2 center, float radius, Rectangle rec);|
GetCollisionRec|Rectangle|(Rectangle rec1, Rectangle rec2);|
CheckCollisionPointRec|bool|(Vector2 point, Rectangle rec);|
CheckCollisionPointCircle|bool|(Vector2 point, Vector2 center, float radius);|
CheckCollisionPointTriangle|bool|(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);|
LoadImage|Image|(const char *fileName);|
LoadImageEx|Image|(Color *pixels, int width, int height);|
LoadImagePro|Image|(void *data, int width, int height, int format);|
LoadImageRaw|Image|(const char *fileName, int width, int height, int format, int headerSize);|
ExportImage|void|(const char *fileName, Image image);|
LoadTexture|Texture2D|(const char *fileName);|
LoadTextureFromImage|Texture2D|(Image image);|
RenderTexture2D LoadRenderTexture(int width, int height);|
UnloadImage|void|(Image image);|
UnloadTexture|void|(Texture2D texture);|
UnloadRenderTexture|void|(RenderTexture2D target);|
GetImageData|Color *|(Image image);|
GetImageDataNormalized|Vector4 *|(Image image);|
GetPixelDataSize|int|(int width, int height, int format);|
GetTextureData|Image|(Texture2D texture);|
UpdateTexture|void|(Texture2D texture, const void *pixels);|
ImageCopy|Image|(Image image);|
ImageToPOT|void|(Image *image, Color fillColor);|
ImageFormat|void|(Image *image, int newFormat);|
ImageAlphaMask|void|(Image *image, Image alphaMask);|
ImageAlphaClear|void|(Image *image, Color color, float threshold);|
ImageAlphaCrop|void|(Image *image, float threshold);|
ImageAlphaPremultiply|void|(Image *image);|
ImageCrop|void|(Image *image, Rectangle crop);|
ImageResize|void|(Image *image, int newWidth, int newHeight);|
ImageResizeNN|void|(Image *image, int newWidth,int newHeight);|
ImageResizeCanvas|void|(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color color);|
ImageMipmaps|void|(Image *image);|
ImageDither|void|(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);|
ImageText|Image|(const char *text, int fontSize, Color color);|
ImageTextEx|Image|(Font font, const char *text, float fontSize, float spacing, Color tint);|
ImageDraw|void|(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec);|
ImageDrawRectangle|void|(Image *dst, Vector2 position, Rectangle rec, Color color);|
ImageDrawText|void|(Image *dst, Vector2 position, const char *text, int fontSize, Color color);|
ImageDrawTextEx|void|(Image *dst, Vector2 position, Font font, const char *text, float fontSize, float spacing, Color color);|
ImageFlipVertical|void|(Image *image);|
ImageFlipHorizontal|void|(Image *image);|
ImageRotateCW|void|(Image *image);|
ImageRotateCCW|void|(Image *image);|
ImageColorTint|void|(Image *image, Color color);|
ImageColorInvert|void|(Image *image);|
ImageColorGrayscale|void|(Image *image);|
ImageColorContrast|void|(Image *image, float contrast);|
ImageColorBrightness|void|(Image *image, int brightness);|
ImageColorReplace|void|(Image *image, Color color, Color replace);|
GenImageColor|void|(int width, int height, Color color);|
GenImageGradientV|void|(int width, int height, Color top, Color bottom);|
GenImageGradientH|void|(int width, int height, Color left, Color right);|
GenImageGradientRadial|void|(int width, int height, float density, Color inner, Color outer);|
GenImageChecked|void|(int width, int height, int checksX, int checksY, Color col1, Color col2);|
GenImageWhiteNoise|void|(int width, int height, float factor);|
GenImagePerlinNoise|void|(int width, int height, int offsetX, int offsetY, float scale);|
GenImageCellular|void|(int width, int height, int tileSize);|
GenTextureMipmaps|void|(Texture2D *texture);|
SetTextureFilter|void|(Texture2D texture, int filterMode);|
SetTextureWrap|void|(Texture2D texture, int wrapMode);|
DrawTexture|void|(Texture2D texture, int posX, int posY, Color tint);|
DrawTextureV|void|(Texture2D texture, Vector2 position, Color tint);|
DrawTextureEx|void|(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);|
DrawTextureRec|void|(Texture2D texture, Rectangle sourceRec, Vector2 position, Color tint);|
DrawTexturePro|void|(Texture2D texture, Rectangle sourceRec, Rectangle destRec, Vector2 origin, float rotation, Color tint);|
GetFontDefault|Font|(void);|
LoadFont|Font|(const char *fileName);|
LoadFontEx|Font|(const char *fileName, int fontSize, int charsCount, int *fontChars);|
LoadFontData|CharInfo *|(const char *fileName, int fontSize, int *fontChars, int charsCount, bool sdf);|
GenImageFontAtlas|Image|(CharInfo *chars, int fontSize, int charsCount, int padding, int packMethod);|
UnloadFont|void|(Font font);|
DrawFPS|void|(int posX, int posY);|
DrawText|void|(const char *text, int posX, int posY, int fontSize, Color color);|
DrawTextEx|void|(Font font, const char* text, Vector2 position, float fontSize, float spacing, Color tint);|
MeasureText|int|(const char *text, int fontSize);|
MeasureTextEx|Vector2|(Font font, const char *text, float fontSize, float spacing);|
FormatText|const char *|(const char *text, ...);|
SubText|const char *|(const char *text, int position, int length);|
GetGlyphIndex|int|(Font font, int character);|
DrawLine3D|void|(Vector3 startPos, Vector3 endPos, Color color);|
DrawCircle3D|void|(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);|
DrawCube|void|(Vector3 position, float width, float height, float length, Color color);|
DrawCubeV|void|(Vector3 position, Vector3 size, Color color);|
DrawCubeWires|void|(Vector3 position, float width, float height, float length, Color color);|
DrawCubeTexture|void|(Texture2D texture, Vector3 position, float width, float height, float length, Color color);|
DrawSphere|void|(Vector3 centerPos, float radius, Color color);|
DrawSphereEx|void|(Vector3 centerPos, float radius, int rings, int slices, Color color);|
DrawSphereWires|void|(Vector3 centerPos, float radius, int rings, int slices, Color color);|
DrawCylinder|void|(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);|
DrawCylinderWires|void|(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);|
DrawPlane|void|(Vector3 centerPos, Vector2 size, Color color);|
DrawRay|void|(Ray ray, Color color);|
DrawGrid|void|(int slices, float spacing);|
DrawGizmo|void|(Vector3 position);|
LoadModel|Model|(const char *fileName);|
LoadModelFromMesh|Model|(Mesh mesh);|
UnloadModel|void|(Model model);|
LoadMesh|Mesh|(const char *fileName);|
UnloadMesh|void|(Mesh *mesh);|
ExportMesh|void|(const char *fileName, Mesh mesh);|
MeshBoundingBox|BoundingBox|(Mesh mesh);|
MeshTangents|void|(Mesh *mesh);|
MeshBinormals|void|(Mesh *mesh);|
GenMeshPlane|Mesh|(float width, float length, int resX, int resZ);|
GenMeshCube|Mesh|(float width, float height, float length);|
GenMeshSphere|Mesh|(float radius, int rings, int slices);|
GenMeshHemiSphere|Mesh|(float radius, int rings, int slices);|
GenMeshCylinder|Mesh|(float radius, float height, int slices);|
GenMeshTorus|Mesh|(float radius, float size, int radSeg, int sides);|
GenMeshKnot|Mesh|(float radius, float size, int radSeg, int sides);|
GenMeshHeightmap|Mesh|(Image heightmap, Vector3 size);|
GenMeshCubicmap|Mesh|(Image cubicmap, Vector3 cubeSize);|
LoadMaterial|Material|(const char *fileName);|
LoadMaterialDefault|Material|(void);|
UnloadMaterial|void|(Material material);|
DrawModel|void|(Model model, Vector3 position, float scale, Color tint);|
DrawModelEx|void|(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);|
DrawModelWires|void|(Model model, Vector3 position, float scale, Color tint);|
DrawModelWiresEx|void|(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);|
DrawBoundingBox|void|(BoundingBox box, Color color);|
DrawBillboard|void|(Camera camera, Texture2D texture, Vector3 center, float size, Color tint);|
DrawBillboardRec|void|(Camera camera, Texture2D texture, Rectangle sourceRec, Vector3 center, float size, Color tint);|
CheckCollisionSpheres|bool|(Vector3 centerA, float radiusA, Vector3 centerB, float radiusB);|
CheckCollisionBoxes|bool|(Vector3 minBBox1, Vector3 maxBBox1, Vector3 minBBox2, Vector3 maxBBox2);|
CheckCollisionBoxSphere|bool|(Vector3 minBBox, Vector3 maxBBox, Vector3 centerSphere, float radiusSphere);|
CheckCollisionRaySphere|bool|(Ray ray, Vector3 spherePosition, float sphereRadius);|
CheckCollisionRaySphereEx|bool|(Ray ray, Vector3 spherePosition, float sphereRadius, Vector3 *collisionPoint);|
CheckCollisionRayBox|bool|(Ray ray, Vector3 minBBox, Vector3 maxBBox);|
GetCollisionRayModel|RayHitInfo|(Ray ray, Model *model);|
GetCollisionRayTriangle|RayHitInfo|(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);|
GetCollisionRayGround|RayHitInfo|(Ray ray, float groundHeight);|
LoadText|char *|(const char *fileName);|
LoadShader|Shader|(char *vsFileName, char *fsFileName);|
LoadShaderCode|Shader|(char *vsCode, char *fsCode);|
UnloadShader|void|(Shader shader);|
GetShaderDefault|Shader|(void);|
GetTextureDefault|Texture2D|(void);|
GetShaderLocation|int|(Shader shader, const char *uniformName);|
SetShaderValue|void|(Shader shader, int uniformLoc, float *value, int size);|
SetShaderValuei|void|(Shader shader, int uniformLoc, int *value, int size);|
SetShaderValueMatrix|void|(Shader shader, int uniformLoc, Matrix mat);|
SetMatrixProjection|void|(Matrix proj);|
SetMatrixModelview|void|(Matrix view);|
GetMatrixModelview|Matrix|();|
BeginShaderMode|void|(Shader shader);|
EndShaderMode|void|(void);|
BeginBlendMode|void|(int mode);|
EndBlendMode|void|(void);|
GetVrDeviceInfo|VrDeviceInfo|(int vrDeviceType);|
InitVrSimulator|void|(VrDeviceInfo info);|
CloseVrSimulator|void|(void);|
IsVrSimulatorReady|bool|(void);|
UpdateVrTracking|void|(Camera *camera);|
ToggleVrMode|void|(void);|
BeginVrDrawing|void|(void);|
EndVrDrawing|void|(void);|
InitAudioDevice|void|(void);|
CloseAudioDevice|void|(void);|
IsAudioDeviceReady|bool|(void);|
SetMasterVolume|void|(float volume);|
LoadWave|Wave|(const char *fileName);|
LoadWaveEx|Wave|(float *data, int sampleCount, int sampleRate, int sampleSize, int channels);|
LoadSound|Sound|(const char *fileName);|
LoadSoundFromWave|Sound|(Wave wave);|
UpdateSound|void|(Sound sound, void *data, int numSamples);|
UnloadWave|void|(Wave wave);|
UnloadSound|void|(Sound sound);|
PlaySound|void|(Sound sound);|
PauseSound|void|(Sound sound);|
ResumeSound|void|(Sound sound);|
StopSound|void|(Sound sound);|
IsSoundPlaying|bool|(Sound sound);|
SetSoundVolume|void|(Sound sound, float volume);|
SetSoundPitch|void|(Sound sound, float pitch);|
WaveFormat|void|(Wave *wave, int sampleRate, int sampleSize, int channels);|
WaveCopy|Wave|(Wave wave);|
WaveCrop|void|(Wave *wave, int initSample, int finalSample);|
GetWaveData|float *|(Wave wave);|
LoadMusicStream|Music|(const char *fileName);|
UnloadMusicStream|void|(Music music);|
PlayMusicStream|void|(Music music);|
UpdateMusicStream|void|(Music music);|
StopMusicStream|void|(Music music);|
PauseMusicStream|void|(Music music);|
ResumeMusicStream|void|(Music music);|
IsMusicPlaying|bool|(Music music);|
SetMusicVolume|void|(Music music, float volume);|
SetMusicPitch|void|(Music music, float pitch);|
SetMusicLoopCount|void|(Music music, float count);|
GetMusicTimeLength|float|(Music music);|
GetMusicTimePlayed|float|(Music music);|
InitAudioStream|AudioStream|(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);|
UpdateAudioStream|void|(AudioStream stream, void *data, int numSamples);|
CloseAudioStream|void|(AudioStream stream);|
IsAudioBufferProcessed|bool|(AudioStream stream);|
PlayAudioStream|void|(AudioStream stream);|
PauseAudioStream|void|(AudioStream stream);|
ResumeAudioStream|void|(AudioStream stream);|
StopAudioStream|void|(AudioStream stream);|
Color|struct||
Rectangle|struct||
Vector2|struct||
Vector3|struct||
Vector4|struct||
Quaternion|struct||
Matrix|struct||
Image|struct||
Texture|struct||
RenderTexture|struct||
CharInfo|struct||
Font|struct||
Camera|struct||
Camera2D|struct||
Mesh|struct||
Shader|struct||
MaterialMap|struct||
Material|struct||
Model|struct||
Ray|struct||
RayHitInfo|struct||
Wave|struct||
Sound|struct||
Music|struct||
AudioStream|struct||
LIGHTGRAY|#define||
GRAY|#define||
DARKGRAY|#define||
YELLOW|#define||
GOLD|#define||
ORANGE|#define||
PINK|#define||
RED|#define||
MAROON|#define||
GREEN|#define||
LIME|#define||
DARKGREEN|#define||
SKYBLUE|#define||
BLUE|#define||
DARKBLUE|#define||
PURPLE|#define||
VIOLET|#define||
DARKPURPLE|#define||
BEIGE|#define||
BROWN|#define||
DARKBROWN|#define||
WHITE|#define||
BLACK|#define||
BLANK|#define||
MAGENTA|#define||
RAYWHITE|#define||

